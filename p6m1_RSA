from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import padding

# Generar claves RSA
private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048,
    backend=default_backend()
)

private_pem = private_key.private_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PrivateFormat.PKCS8,
    encryption_algorithm=serialization.NoEncryption()
)

public_key = private_key.public_key()
public_pem = public_key.public_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PublicFormat.SubjectPublicKeyInfo
)

# Guardar claves en archivos
with open("jeremy_privada.pem", "wb") as f:
    f.write(private_pem)

with open("jeremy_publica.pem", "wb") as f:
    f.write(public_pem)

# Texto a cifrar
texto = b"ESTAMOSENCLASEDECRIPTOGRAFIA"

# Cifrar el texto
texto_cifrado = public_key.encrypt(
    texto,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)

# Guardar texto cifrado en archivo
with open("texto_cifrado.bin", "wb") as f:
    f.write(texto_cifrado)

# Descifrar el texto
texto_descifrado = private_key.decrypt(
    texto_cifrado,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)

# Guardar texto descifrado en archivo
with open("texto_descifrado.txt", "wb") as f:
    f.write(texto_descifrado)

print("Claves RSA generadas y guardadas.")
print("Texto cifrado y guardado.")
print("Texto descifrado y guardado.")
