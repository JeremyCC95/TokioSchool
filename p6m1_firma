from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import serialization
import binascii

# Cargar la clave privada desde el archivo
with open("jeremy_privada.pem", "rb") as key_file:
    private_key = serialization.load_pem_private_key(
        key_file.read(),
        password=None,
        backend=default_backend(),
    )

# Mensaje a firmar
mensaje = b"ESTAMOS EN CLASE DE CRIPTOGRAFIA"

# Firmar el mensaje
firma = private_key.sign(
    mensaje,
    padding.PSS(
        mgf=padding.MGF1(hashes.SHA256()),
        salt_length=padding.PSS.MAX_LENGTH,
    ),
    hashes.SHA256(),
)

# Mostrar la firma en hexadecimal
firma_hex = binascii.hexlify(firma).decode()
print("Firma en hexadecimal:", firma_hex)

# Verificar la firma
public_key = private_key.public_key()

try:
    public_key.verify(
        firma,
        mensaje,
        padding.PSS(
            mgf=padding.MGF1(hashes.SHA256()),
            salt_length=padding.PSS.MAX_LENGTH,
        ),
        hashes.SHA256(),
    )
    print("La firma es válida.")
except Exception as e:
    print(f"La firma no es válida: {e}")
